{
  "openapi": "3.0.0",
  "info": {
    "description": "Edustipend api documentation",
    "version": "1.0.0",
    "title": "Edustipend Doc",
    "contact": {
      "email": ""
    }
  },
  "servers": [
    {
      "url": "http://localhost:4500/v1",
      "description": "Base URL for testing on local machine"
    },
    {
      "url": "https://edustipend-api-dad9440ec9e5.herokuapp.com/v1",
      "description": "Base URL for testing on dev server"
    }
  ],
  "tags": [
    {
      "name": "auth",
      "description": "Everything about signup, sign in, password reset, email verification"
    },
    {
      "name": "stipend",
      "description": "Everything about requesting a stipend"
    },
    {
      "name": "admin",
      "description": "Everything about admin"
    },
    {
      "name": "waitlist",
      "description": "Everything about waitlist"
    },
    {
      "name": "user",
      "description": "Everything about user actions"
    },
    {
      "name": "donation",
      "description": "Everything about donations"
    },
    {
      "name": "referral",
      "description": "Everything about referrals"
    }
  ],
  "consumes": ["application/json"],
  "produces": ["application/json"],
  "paths": {
    "/register": {
      "post": {
        "tags": ["auth"],
        "summary": "Register a new user",
        "description": "Edustipend users can register with this endpoint",
        "requestBody": {
          "description": "This is the request body for login",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/definitions/registerUser"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "{ success: true, message: 'Registration successful, please check your email for verification link', id: id}"
          },
          "400": {
            "description": "{ success: false, message: 'Bad request'} "
          },
          "500": {
            "description": "Error generating user token"
          }
        }
      }
    },
    "/user/check": {
      "post": {
        "tags": ["user"],
        "summary": "Check for user",
        "description": "This checks if a user exists",
        "requestBody": {
          "description": "This is the request body for checking user",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/definitions/checkUser"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User exists and has been found"
          },
          "404": {
            "description": "User does not exist"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/user/verify": {
      "post": {
        "tags": ["user"],
        "summary": "Verify a new user via email",
        "description": "Edustipend users can verify with this endpoint",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "query",
            "name": "jwt",
            "description": "Confirm user email from jwt",
            "required": true,
            "type": "string",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "{ success: true, message: 'User is already verified'} "
          },
          "201": {
            "description": "{ success: true, message: 'Verified user successfully', token: 'Bearer token'}"
          },
          "400": {
            "description": "{ success: false, message: 'Missing required jwt' } "
          },
          "404": {
            "description": "{ success: false, message: ''User does not exist'' } "
          },
          "500": {
            "description": "Unable to verify user"
          }
        }
      }
    },
    "/user/request-stipend": {
      "post": {
        "tags": ["stipend"],
        "summary": "Make a request from a user",
        "description": "Edustipend users can request for stipends with this endpoint",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "reasonForRequest",
            "description": "Reason for request",
            "required": true,
            "type": "string",
            "schema": {
              "$ref": "#/definitions/request-stipend"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "{ success: true, message: 'Request successfully created', requestID: [requestId]}"
          },
          "400": {
            "description": "{ success: false, message: 'Request not completed'}"
          },
          "500": {
            "description": "Could not connect to DB"
          }
        }
      }
    },
    "/user/stipend/apply": {
      "post": {
        "tags": ["user"],
        "summary": "Create first application",
        "description": "Users create their first application alongside account registration",
        "requestBody": {
          "description": "user details and stipend request",
          "required": "true",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "password": {
                    "type": "string"
                  },
                  "dateOfBirth": {
                    "type": "string"
                  },
                  "gender": {
                    "type": "string"
                  },
                  "stateOfOrigin": {
                    "type": "string"
                  },
                  "howDidYouHearAboutUs": {
                    "type": "string",
                    "enum": [
                      "facebook",
                      "twitter",
                      "instagram",
                      "whatsapp",
                      "friend",
                      "other"
                    ]
                  },
                  "email": {
                    "type": "string"
                  },
                  "stipendCategory": {
                    "type": "string",
                    "enum": ["laptop", "data", "course"]
                  },
                  "reasonForRequest": {
                    "type": "string"
                  },
                  "stepsTakenToEaseProblem": {
                    "type": "string"
                  },
                  "potentialBenefits": {
                    "type": "string"
                  },
                  "futureHelpFromUser": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User created successfully, along with data"
          },
          "400": {
            "description": "Invalid request"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/reset-password": {
      "post": {
        "tags": ["auth"],
        "summary": "Reset your password",
        "description": "Edustipend users can reset password with this endpoint",
        "requestBody": {
          "description": "User email for reset link to be sent to",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/definitions/reset-password"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "{ success: true, message: 'Please check your email for the password reset link.'}"
          },
          "400": {
            "description": "{ success: false, message: 'Bad request' } "
          },
          "422": {
            "description": "{ success: false, message: 'Validation issues' } "
          },
          "404": {
            "description": "{ success: false, message: 'If user exists, email will be sent' } "
          },
          "500": {
            "description": "Could not connect to DB"
          }
        }
      }
    },
    "/update-password": {
      "post": {
        "tags": ["auth"],
        "summary": "Update your password",
        "description": "Edustipend users can update password with this endpoint",
        "requestBody": {
          "description": "Details required for password update",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/definitions/update-password"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "{ success: true, message: 'Password update successful' }"
          },
          "400": {
            "description": "{ success: false, message: 'Verification code is required' } "
          },
          "401": {
            "description": "{ success: false, message: 'Unauthorized'} "
          },
          "422": {
            "description": "{ success: false, message: 'Invalid or expired token' } "
          },
          "404": {
            "description": "{ success: false, message: 'User not found' } "
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/login": {
      "post": {
        "tags": ["auth"],
        "summary": "Sign in to your account",
        "description": "Sign in to generate an access token",
        "produces": ["application/json"],
        "requestBody": {
          "description": "Details for logging in",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/definitions/signIn"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "{ success: true, message: 'Sign in successful', token: Bearer token} "
          },
          "401": {
            "description": "{ success: false, message: 'Unauthorized'}"
          },
          "500": {
            "description": "Error message"
          }
        }
      }
    },
    "/admin/approve-stipend": {
      "put": {
        "tags": ["admin"],
        "deprecated": true,
        "summary": "approve multiple applications",
        "description": "Admin approve multiple applications",
        "requestBody": {
          "description": "applications to approve",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "stipendRequestIds": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "{ success: true, data: 'Stipend request successfully approved' }"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "{ success: false, message: 'Access Denied! :(' }"
          },
          "404": {
            "description": "{ success: false, message: 'Applications not found' }"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/admin/reject-stipend": {
      "put": {
        "tags": ["admin"],
        "deprecated": true,
        "summary": "reject multiple applications",
        "description": "Admin reject multiple applications",
        "produces": ["application/json"],
        "requestBody": {
          "description": "applications to reject",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "stipendRequestIds": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "{ success: true, data: 'Stipend request successfully rejected' }"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "{ success: false, message: 'Access Denied! :(' }"
          },
          "404": {
            "description": "{ success: false, message: 'Applications not found' }"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/waitlist/join-waitlist": {
      "post": {
        "tags": ["waitlist"],
        "deprecated": true,
        "summary": "join a waitlist",
        "description": "Adds people to be notified when fresh application window opens",
        "requestBody": {
          "description": "User to be added to the waitlist",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/definitions/join-waitlist"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "{ success: true, message: 'Successfully added to the waitlist'}"
          },
          "400": {
            "description": "{ success: false, message: 'Request not completed'}"
          },
          "500": {
            "description": "Could not connect to DB"
          }
        }
      }
    },
    "/user/application-status/{userId}": {
      "get": {
        "tags": ["stipend"],
        "summary": "Get a user stipend application status",
        "description": "Edustipend users can get their stipend application status with this end point",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "description": "get the user id",
            "required": true,
            "type": "number",
            "schema": {
              "$ref": "#/definitions/application-status"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "{ success: true, message: 'Approved.'}"
          },
          "200": {
            "description": "{ success: false, message: 'Denied' } "
          },
          "404": {
            "description": "{ success: false, error: 'Application does not exist.' }"
          }
        }
      }
    },
    "/admin/notify-waitlist": {
      "post": {
        "tags": ["admin"],
        "summary": "notify the waitlist",
        "deprecated": true,
        "description": "Notify every email in the wait list",
        "responses": {
          "201": {
            "description": "{ success: true, message: 'Successfully notified to the waitlist'}"
          },
          "400": {
            "description": "{ success: false, message: 'Request not completed'}"
          },
          "500": {
            "description": "Could not connect to DB"
          }
        }
      }
    },
    "/admin/application-window": {
      "post": {
        "tags": ["admin"],
        "deprecated": true,
        "summary": "set application window",
        "description": "Admin sets a new application window",
        "produces": ["application/json"],
        "requestBody": {
          "description": "set the next application window",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/definitions/set-application-window"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "{ success: true, data: 'Application window has been set' }"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/admin/close-application-window": {
      "put": {
        "tags": ["admin"],
        "deprecated": true,
        "summary": "close application window",
        "description": "Admin manually ends a current application window",
        "produces": ["application/json"],
        "responses": {
          "201": {
            "description": "{ success: true, data: 'Application window has been manually closed' }"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/user/application-history/search?id={userId}": {
      "get": {
        "tags": ["stipend"],
        "summary": "Get a user stipend application history",
        "description": "Edustipend users can get their stipend application history with this endpoint",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "description": "get the user id",
            "required": true,
            "type": "number",
            "schema": {
              "$ref": "#/definitions/application-history"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "{ success: true, message: 'data'}"
          },
          "404": {
            "description": "{ success: false, error: 'user history does not exist' }"
          }
        }
      }
    },
    "/stipend/one-click-apply/{email}": {
      "get": {
        "tags": ["stipend"],
        "summary": "get last application",
        "description": "User gets details of last application",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "email",
            "in": "path",
            "description": "User ID to retrieve the most frequent stipend request",
            "required": "true",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "{ success: true, message: lastUsedData }"
          },
          "401": {
            "description": "No previous stipend request was found"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/donation": {
      "post": {
        "tags": ["donation"],
        "summary": "Make a donation",
        "description": "Donors can initiate a Flutterwave transaction with this endpoint",
        "requestBody": {
          "description": "Payload for Flutterwave transactions",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/definitions/donation"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "{ success: true, message: 'Link to continue' }"
          },
          "500": {
            "description": "Error message"
          }
        }
      }
    },
    "/donation/range": {
      "get": {
        "tags": ["donation"],
        "summary": "Get total donations within a date range",
        "description": "Retrieve the total donations from a particular date range. If no date range is provided, it will return the total donations ever.",
        "parameters": [
          {
            "name": "startDate",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date",
              "example": "2024-06-13"
            },
            "description": "Start date for the range in YYYY-MM-DD format"
          },
          {
            "name": "endDate",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date",
              "example": "2024-06-14"
            },
            "description": "End date for the range in YYYY-MM-DD format"
          }
        ],
        "responses": {
          "200": {
            "description": "JSON response"
          },
          "404": {
            "description": "Not found error"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/donation/overview": {
      "get": {
        "tags": ["donation"],
        "summary": "Get an overview of all donations",
        "description": "Retrieve an overview of all donations. This endpoint takes no payload or parameters.",
        "responses": {
          "200": {
            "description": "Overview of total donations and unique donors"
          },
          "404": {
            "description": "Not found error"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/donation/timeline": {
      "get": {
        "tags": ["donation"],
        "summary": "Get a list of donations with optional cursor-based pagination",
        "description": "Retrieve a list of all donations and the cursor for the next page. The optional 'start' query parameter is used for cursor-based pagination.",
        "parameters": [
          {
            "name": "start",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "example": "664cdf392862bf2421c4b266"
            },
            "description": "Cursor for pagination, start after this donation ID"
          }
        ],
        "responses": {
          "200": {
            "description": "List of donations"
          },
          "404": {
            "description": "Resource not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/referral": {
      "get": {
        "tags": ["referral"],
        "summary": "Get a list of referrals",
        "description": "Retrieve a list of all referrals. Optionally filter by referrer using the 'referrer' query parameter.",
        "parameters": [
          {
            "name": "referrer",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "example": "Mezuo"
            },
            "description": "Filter referrals by referrer name"
          }
        ],
        "responses": {
          "200": {
            "description": "List of referrals"
          },
          "404": {
            "description": "Not found error"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/top-referrers": {
      "get": {
        "tags": ["referral"],
        "summary": "Get the top referrers and the sum of their referrals",
        "description": "Retrieve the top referrers and the sum of their referrals. Optionally specify the top 'n' referrers using the 'top' query parameter.",
        "parameters": [
          {
            "name": "top",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "example": 2
            },
            "description": "Specify the top 'n' referrers to retrieve"
          }
        ],
        "responses": {
          "200": {
            "description": "Top referrers and the summation of their impact"
          },
          "404": {
            "description": "Not found error"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    }
  },
  "definitions": {
    "registerUser": {
      "required": [
        "name",
        "email",
        "password",
        "dateOfBirth",
        "gender",
        "stateOfOrigin",
        "howDidYouHearAboutUs"
      ],
      "properties": {
        "name": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "dateOfBirth": {
          "type": "string"
        },
        "gender": {
          "type": "string",
          "enum": ["male", "female"]
        },
        "stateOfOrigin": {
          "type": "string"
        },
        "howDidYouHearAboutUs": {
          "type": "string",
          "enum": [
            "facebook",
            "twitter",
            "instagram",
            "whatsapp",
            "friend",
            "other"
          ]
        }
      }
    },
    "application-status": {
      "required": ["id"],
      "properties": {
        "id": {
          "type": "number"
        }
      }
    },
    "reset-password": {
      "required": ["email"],
      "properties": {
        "email": {
          "type": "string"
        }
      }
    },
    "application-history": {
      "required": ["id"],
      "properties": {
        "id": {
          "type": "number"
        }
      }
    },
    "update-password": {
      "required": ["resetToken", "userId", "password"],
      "properties": {
        "password": {
          "type": "string"
        },
        "resetToken": {
          "type": "string"
        },
        "userId": {
          "type": "string"
        }
      }
    },
    "request-stipend": {
      "required": [
        "email",
        "stipendCategory",
        "reasonForRequest",
        "stepsTakenToEaseProblem",
        "potentialBenefits",
        "futureHelpFromUser",
        "user"
      ],
      "properties": {
        "email": {
          "type": "string"
        },
        "stipendCategory": {
          "type": "string",
          "enum": ["laptop", "data", "course"]
        },
        "reasonForRequest": {
          "type": "string"
        },
        "stepsTakenToEaseProblem": {
          "type": "string"
        },
        "potentialBenefits": {
          "type": "string"
        },
        "futureHelpFromUser": {
          "type": "string"
        },
        "user": {
          "type": "object",
          "properties": {
            "_id": {
              "type": "string"
            },
            "email": {
              "type": "string"
            },
            "username": {
              "type": "string"
            }
          }
        }
      }
    },
    "signIn": {
      "required": ["username", "password"],
      "properties": {
        "username": {
          "type": "string"
        },
        "password": {
          "type": "string"
        }
      }
    },
    "join-waitlist": {
      "required": ["email", "name", "howDidYouHearAboutUs"],
      "properties": {
        "email": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "howDidYouHearAboutUs": {
          "type": "string",
          "enum": [
            "facebook",
            "twitter",
            "instagram",
            "whatsapp",
            "friend",
            "other"
          ]
        }
      }
    },
    "set-application-window": {
      "required": ["startDate", "endDate"],
      "properties": {
        "startDate": {
          "type": "string"
        },
        "endDate": {
          "type": "string"
        }
      }
    },
    "checkUser": {
      "required": ["email"],
      "properties": {
        "email": {
          "type": "string"
        }
      }
    },
    "donation": {
      "required": [
        "amount",
        "redirect_url",
        "payment_options",
        "currency",
        "campaign",
        "customer"
      ],
      "properties": {
        "amount": {
          "type": "string",
          "example": "10200"
        },
        "redirect_url": {
          "type": "string",
          "example": "http://edustipend.org"
        },
        "payment_options": {
          "type": "string",
          "example": "card"
        },
        "currency": {
          "type": "string",
          "example": "NGN"
        },
        "campaign": {
          "type": "string",
          "example": "Support A Learner"
        },
        "referrer": {
          "type": "string",
          "example": "Mezuo"
        },
        "meta": {
          "type": "object",
          "properties": {
            "companyName": {
              "type": "string",
              "example": "Edustipend"
            }
          }
        },
        "customer": {
          "type": "object",
          "required": ["email", "name", "phone_number"],
          "properties": {
            "email": {
              "type": "string",
              "example": "donor@email.com"
            },
            "name": {
              "type": "string",
              "example": "John Doe"
            },
            "phone_number": {
              "type": "string",
              "example": "09012345678"
            }
          }
        }
      }
    }
  }
}
